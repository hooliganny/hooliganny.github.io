---
import type { GetStaticPaths } from "astro";
import { getCollection, getEntry } from "astro:content";
import MarkdownContent from "../../components/MarkdownContent.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import Icon from "../../components/Icon.astro";

export const getStaticPaths: GetStaticPaths = async () => {
  const allProjects = await getCollection("projects");
  return allProjects.map((project) => {
    return { params: { project: project.slug } };
  });
};

const entry = await getEntry("projects", Astro?.params?.project as string);

const { Content } = (await entry?.render()) ?? {};
---

<MainLayout title={`${entry?.data.title} | hooliganny`}>
  <header
    class="flex flex-col gap-3 md:flex-row md:gap-0 border bg-primary-green/70 border-white p-6 rounded-lg w-full shadow-[inset_0_0_20px_0_var(--accent)]"
  >
    <div class="w-full flex flex-col gap-3">
      <h2
        transition:name={entry?.data.title}
        class="text-4xl text-primary-purple"
      >
        {entry?.data.title}
      </h2>
      <h3>
        Written: {new Date(entry?.data?.date || "").toDateString()}
        {
          entry?.data?.updatedDate && (
            <>
              <br />
              Updated: {new Date(entry?.data?.updatedDate || "").toDateString()}
            </>
          )
        }
      </h3>

      {
        entry?.data?.live_link && (
          <p class="break-all">
            Live Link:{" "}
            <a
              href={entry?.data?.live_link}
              class="underline text-primary-purple"
            >
              {entry?.data.live_link}
            </a>
          </p>
        )
      }
    </div>

    <Icon
      transitionName={`${entry?.data.title}-icon`}
      icon={entry?.data?.title || ""}
      className={`-order-1 md:order-1 flex-shrink-0 text-primary-purple size-16 md:size-20`}
    />
  </header>
  <MarkdownContent>
    {Content && <Content />}
  </MarkdownContent>
</MainLayout>
